{
	"info": {
		"created":"by Denis"
		"modified":"by Denis2"
		"_postman_id": "tester",
		"name": "group_27",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW_2",
			"item": [
				{
					"name": "EP_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
									"}); \r",
									"\r",
									"// http://162.55.220.72:5005/first Отправить запрос. Статус код 200 Проверить, что в body приходит правильный string "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Отправить запрос. 2. Статус код 200\r",
									"pm.test(\"Verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									" //Спарсить response body в json.\r",
									" var jsonData = pm.response.json();\r",
									" var resp_name = jsonData.name;\r",
									" var resp_age = jsonData.age;\r",
									" var resp_salary = jsonData.salary;\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test(\"Check name resp\", function () {\r",
									"    pm.expect(resp_name).to.eql(\"Vadim\");\r",
									"});\r",
									"\r",
									"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"Check age resp\", function () {\r",
									"    pm.expect(resp_age).to.eql(\"27\");\r",
									"})\r",
									"\r",
									"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test(\"Check salary resp\", function (){\r",
									"    pm.expect(resp_salary).to.eql(3000);\r",
									"})\r",
									"\r",
									"//Спарсить request.\r",
									"var post_form_data = request.data;\r",
									"var req_name = post_form_data.name;\r",
									"var req_age = post_form_data.age;\r",
									"var req_salary = post_form_data.salary;\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test (\"Check name jsonData = name post_form_data\", function () {\r",
									"    pm.expect(resp_name).to.eql(req_name);\r",
									"})\r",
									"\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test (\"Check age jsonData = age post_form_data\", function () {\r",
									"    pm.expect(resp_age).to.eql(req_age);\r",
									"})\r",
									"\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test (\"Check salary jsonData = salary post_form_data\", function () {\r",
									"    pm.expect(resp_salary).to.eql(+ req_salary);\r",
									"})\r",
									"\r",
									"//Вывести в консоль параметр family из response.\r",
									"var resp_family = jsonData.family;\r",
									"console.log (\"resp_family =\", resp_family);\r",
									"\r",
									"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"if (jsonData.salary * 4 == resp_family.u_salary_1_5_year);\r",
									"{\r",
									"var future_salary = jsonData.family;\r",
									"}\r",
									"\r",
									" pm.test (\"Check salary 1.5 = salary * 4\", function () {\r",
									"  pm.expect(future_salary.u_salary_1_5_year).to.eql(+post_form_data.salary*4);\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Vadim",
									"type": "text"
								},
								{
									"key": "age",
									"value": "27",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Отправить запрос. 2. Статус код 200\r",
									"pm.test(\"Verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//  Спарсить response body в json.\r",
									"var jsonData = pm.response.json();\r",
									"var resp_name = jsonData.name;\r",
									"var resp_age = jsonData.age;\r",
									"var resp_salary = jsonData.salary;\r",
									"\r",
									"//Спарсить request.\r",
									"var get_params = pm.request.url.query.toObject();\r",
									"var req_name = get_params.name;\r",
									"var req_age = get_params.age;\r",
									"var req_salary = get_params.salary;\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test (\"Check name req\", function () {\r",
									"    pm.expect(resp_name).to.eql(req_name);\r",
									"})\r",
									"\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test (\"Check age req\", function () {\r",
									"    pm.expect(resp_age).to.eql(req_age);\r",
									"})\r",
									"\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test (\"Check salary req\", function () {\r",
									"    pm.expect(resp_salary).to.eql(+req_salary);\r",
									"})\r",
									"\r",
									"// Вывести в консоль параметр family из response.\r",
									"let resp_family = jsonData.family;\r",
									"console.log (\"resp_family =\", resp_family);\r",
									"\r",
									"//Проверить, что у параметра dog есть параметры name.\r",
									"pm.test (\"Check dog to have name\", function () {\r",
									"    pm.expect (resp_family.pets.dog).to.have.any.key('name');\r",
									"})\r",
									"\r",
									"//Проверить, что у параметра dog есть параметры age.\r",
									"pm.test (\"Check dog have age\", function () {\r",
									"    pm.expect(resp_family.pets.dog).to.have.any.key('age');\r",
									"})\r",
									"\r",
									"//Проверить, что параметр name имеет значение Luky.\r",
									"pm.test (\"Check name eql Luky\", function () {\r",
									"    pm.expect (resp_family.pets.dog.name).to.eql(\"Luky\");\r",
									"})\r",
									"\r",
									"//Проверить, что параметр age имеет значение 4.\r",
									"pm.test (\"Check age eql 4\", function () {\r",
									"    pm.expect (resp_family.pets.dog.age).to.eql(4);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Vadim&age=27&salary=3000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Vadim"
								},
								{
									"key": "age",
									"value": "27"
								},
								{
									"key": "salary",
									"value": "3000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json.\r",
									"var jsonData = pm.response.json ();\r",
									"var resp_name = jsonData.name;\r",
									"var resp_age = jsonData.age;\r",
									"var resp_salary = jsonData.salary;\r",
									"//Cпарсить request.\r",
									"var get_params = pm.request.url.query.toObject();\r",
									"var req_name = get_params.name;\r",
									"var req_age = get_params.age;\r",
									"var req_salary = get_params.salary;\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test (\"Check name jsonData = name get_params\", function () {\r",
									"    pm.expect(resp_name).to.eql(req_name);\r",
									"})\r",
									"\r",
									"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"pm.test (\"Check name jsonData = name get_params\", function () {\r",
									"    pm.expect(resp_age).to.eql(+req_age);\r",
									"})\r",
									"\r",
									"//Вывести в консоль параметр salary из request.\r",
									"console.log (\"req_salary =\"+ req_salary);\r",
									"\r",
									"// Вывести в консоль параметр salary из response.\r",
									"console.log (\"resp_salary =\"+ resp_salary);\r",
									"\r",
									"//Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log (\"resp_salary =\"+ resp_salary[0])\r",
									"\r",
									"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log (\"resp_salary =\"+ resp_salary[1]);\r",
									"\r",
									"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log (\"resp_salary =\"+ resp_salary[2]);\r",
									"\r",
									"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test (\"Check 0 element of salary = salary from req\", function () {\r",
									"    pm.expect(resp_salary[0]).to.eql(+req_salary);\r",
									"})\r",
									"\r",
									"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test (\"Check 0 element of salary = salary from req\", function () {\r",
									"    pm.expect(+(resp_salary[1])).to.eql(+req_salary * 2);\r",
									"})\r",
									"\r",
									"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test (\"Check 0 element of salary = salary from req\", function () {\r",
									"    pm.expect(+(resp_salary[2])).to.eql(+req_salary * 3);\r",
									"})\r",
									"\r",
									"// Передать в окружение переменную name\r",
									"pm.environment.set(\"name\", resp_name);\r",
									"\r",
									"// Передать в окружение переменную age\r",
									"pm.environment.set(\"age\", resp_age);\r",
									"\r",
									"// Передать в окружение переменную salary\r",
									"var resp_salary_1 = jsonData.salary[0];\r",
									"pm.environment.set(\"salary\", resp_salary_1);\r",
									"\r",
									"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"var count = 1\r",
									"\r",
									"for (var i = 0; i < jsonData.salary.length; i++) {\r",
									"    console.log(count, \"Item_salary =\", jsonData.salary[i]);\r",
									"    count++\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Vadim&age=27&salary=3000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Vadim"
								},
								{
									"key": "age",
									"value": "27"
								},
								{
									"key": "salary",
									"value": "3000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json.\r",
									"var jsonData = pm.response.json ();\r",
									"var resp_start_qa_salary = jsonData.start_qa_salary;\r",
									"var resp_qa_salary_after_6_months = jsonData.qa_salary_after_6_months;\r",
									"var resp_qa_salary_after_12_months = jsonData.qa_salary_after_12_months;\r",
									"var resp_person = jsonData.person;\r",
									"//Спарсить request.\r",
									"var post_form_data = request.data;\r",
									"var req_name = post_form_data.name;\r",
									"var req_age = post_form_data.age;\r",
									"var req_salary = post_form_data.salary;\r",
									"\r",
									"// Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test (\"Check json response have start_qa_salary\", function () {\r",
									"    pm.expect (jsonData).to.have.any.key('start_qa_salary');\r",
									"})\r",
									"\r",
									"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test (\"Check json response have qa_salary_after_6_months\", function () {\r",
									"    pm.expect (jsonData).to.have.any.key('qa_salary_after_6_months');\r",
									"})\r",
									"\r",
									"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test (\"Check json response have qa_salary_after_12_months\", function () {\r",
									"    pm.expect (jsonData).to.have.any.key('qa_salary_after_12_months');\r",
									"})\r",
									"\r",
									"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test (\"Check json response have qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect (jsonData).to.have.any.key('qa_salary_after_1.5_year');\r",
									"})\r",
									"\r",
									"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test (\"Check json response have qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect (jsonData).to.have.any.key('qa_salary_after_3.5_years');\r",
									"})\r",
									"\r",
									"//Проверить, что json response имеет параметр person\r",
									"pm.test (\"Check json response have person\", function () {\r",
									"    pm.expect (jsonData).to.have.any.key('person');\r",
									"})\r",
									"\r",
									"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test (\"Check start_qa_salary eql salary from req\", function () {\r",
									"  pm.expect (resp_start_qa_salary).to.eql(+req_salary);\r",
									"})\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test (\"Check qa_salary_after_6_months eql salary * 2 \", function () {\r",
									"  pm.expect (resp_qa_salary_after_6_months).to.eql(+req_salary * 2);\r",
									"})\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test (\"Check qa_salary_after_12_months eql salary * 2.7 \", function () {\r",
									"  pm.expect (resp_qa_salary_after_12_months).to.eql(+req_salary * 2.7);\r",
									"})\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test (\"Check qa_salary_after_1.5_year eql salary * 3.3 \", function () {\r",
									"  pm.expect (jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req_salary * 3.3);\r",
									"})\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test (\"Check qa_salary_after_3.5_years eql salary * 3.8 \", function () {\r",
									"  pm.expect (jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req_salary * 3.8);\r",
									"})\r",
									"\r",
									"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test (\"Check the first element of u_name eql salary from req \", function () {\r",
									"  pm.expect (resp_person.u_name[1]).to.eql(+req_salary);\r",
									"})\r",
									"\r",
									"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test (\"Check the first element of u_name eql salary from req \", function () {\r",
									"  pm.expect (resp_person.u_age).to.eql(+req_age);\r",
									"})\r",
									"\r",
									"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test (\"Check qa_salary_5_years eql salary * 4.2 \", function () {\r",
									"  pm.expect (resp_person.u_salary_5_years).to.eql(+req_salary * 4.2);\r",
									"})\r",
									"\r",
									"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"var person = {\r",
									"        \"u_age\": 27,\r",
									"        \"u_name\": [\r",
									"            \"Vadim\",\r",
									"            3000,\r",
									"            27\r",
									"        ],\r",
									"        \"u_salary_5_years\": 12600.0\r",
									"    }\r",
									"var count = 1\r",
									"\r",
									"for (var key in person) {\r",
									"        console.log(count, key, person[key]);\r",
									"        count++\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get(\"name\");\r",
									"pm.environment.get(\"age\");\r",
									"pm.environment.get(\"salary\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
